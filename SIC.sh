#!/bin/bash
#compiled from many other, but, written by hackzo the clown
#reachable @ envs.stroud@gmail.com

#This sets up the 'usage' function which gives a message about usage then loops to main
function usage()
{	clear 2>/dev/null
	printf "\nScan In a Can\n"
	
	printf "\n I hope this tool aids someone in speeding up their efforts and strategy 
during capture the flag contests. 
Maybe in the future, aiding in automated pentesting as well.
This tool is made to be used on a standard Kali image and relies heavily on other installed utilities."
main
}




#This sets up the 'sys_enum' function for remote SYSTEM ENUMERATION
function sys_enum()
{	clear 2>/dev/null
	printf "\nSystem Enumeration\n"
	printf "\n\nThis module enumerates remote system information and appends it to a textfile.\n"
	printf "\nIt is structured in a way that is broken into 'Levels' the higher the level, the more agressive.\n"
	printf "\nNONE OF THIS IS STEALTHY!! 
	
1. Verbose nmap with no arguements.
2. Adds OS and service version info, traceroute and scripts against services.
3. Performs above, but, against ALL TCP ports. (Takes forever)
4. Performs above AND adds all UDP ports . (EVEN LONGER)
5. Adds 'default' tagged vulnerability scans.\n\n"
confirm
outfile 
usr_details | tee -a $outfile
target_sel
PS3='Please select a level: '
	options=("Level 1" "Level 2" "Level 3" "Level 4" "Level 5" "Quit")
	select opt in "${options[@]}"
	do
		case $opt in
			"Level 1")
				nmap -vvv $target | tee -a $outfile
				;;
			"Level 2")
				nmap -v -sS -A -T4 $target | tee -a $outfile
				;;
			"Level 3")
				nmap -v -sS -p--A -T4 $target | tee -a $outfile
				;;
			 "Level 4")
				nmap -v -sU -sS -p- -A -T4 $target | tee -a $outfile
				;;
			 "Level 5")
				nmap -v -sU -sS -sC -p- -A -T4 $target | tee -a $outfile
				;;
			 "Quit") 
				break
				main
				;;
			*) echo Invalid Level;;
		esac
	done





#	echo "#############" | tee -a $outfile
#	echo "#SCAN OUTPUT#" | tee -a $outfile
#	echo "#############" | tee -a $outfile
#	echo $usrname 'is the operator' 	
#	printf "\n\nYour Scan Data\n" | tee -a $outfile
	

	echo "Done, output saved to $outfile" 
	sleep 1
	main
}		

#######################################################################################################
###Functions###########################################################################################
#######################################################################################################

function target_sel()
#This asks for a target. Unsanitary IP address is expected.
{	read -p 'Please enter the target ip : ' target
#I need to massage this and implement some sanitization, but, expand to include dns names. 
}
function confirm() 
#Asks to Continue, or loops back to main function 
{	read -p 'Continue? Y/n : ' choice
    if [[ $choice == 'n' ]]; then
		echo "Aborted"
		main
    fi
}
function usr_details()
#This will create a function that will setup who is using the program for op notes
{ printf "\n\nPlease privide a name for logging purposes. 
	This keeps honest people honest\n"
	#This creates the variable usrname which sloppily stores the name of the operator
	read -p 'Operator Name : ' usrname
}
function outfile()		
#This will create a variable called outfile 
{	printf "\n\nPlease provide a path to which the output will be saved. I.e /tmp/output.txt\n"
	read -p 'Path to outfile : ' outfile
}
#This sets up the 'Main' function
function main()
{	echo " "
	
	printf "\nSIC - Scan In a Can\n\n"
	
	PS3='Please enter your choice: '
	options=("Usage" "System Enumeration" "Service Enumeration" "External Utilities" "Cleartext Credentials" "Quit")
	select opt in "${options[@]}"
	do
		case $opt in
			"Usage")
				usage
				;;
			"System Enumeration")
				sys_enum
				;;
			"Service Enumeration")
				serv_enum
				;;
			 "External Utilities")
				ext_util
				;;
			 "Cleartext Credentials")
				cleartext
				;;
			 "Quit") 
				break
				exit 1
				;;
			*) echo invalid option;;
		esac
	done
}

main

